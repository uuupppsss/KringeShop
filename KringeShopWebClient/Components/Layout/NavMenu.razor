@inherits LayoutComponentBase
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using KringeShopWebClient.Model;

@inject ProtectedSessionStorage ProtectedSessionStorage
<CascadingAuthenticationState>
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Pickme Shop</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span aria-hidden="true"></span> Товары
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Account">
                <span aria-hidden="true"></span> Личный кабинет
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Basket">
                <span aria-hidden="true"></span> Корзина
            </NavLink>
        </div>


            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/AddProduct">
                    <span aria-hidden="true"></span> Добавить продукт
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Orders">
                    <span aria-hidden="true"></span> Заказы
                </NavLink>
            </div>
        </nav>
</div>
</CascadingAuthenticationState>
@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private ClaimsPrincipal authUser;

    protected override Task OnInitializedAsync() => LoadData();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // string username;
        // var result = await ProtectedSessionStorage.GetAsync<UserSession>("UserSession");
        // if (result.Success) username = result.Value.Username;
        // else username = " ";
        //return base.OnAfterRenderAsync(firstRender);
    }
    private async Task LoadData()
    {
        // var auth = await authenticationState;
        // authUser = auth.User;
        // string username;
        // var result = await ProtectedSessionStorage.GetAsync<UserSession>("UserSession");
        // if (result.Success) username = result.Value.Username;
        // else username = " ";

    }
}

