@page "/SignIn"
@rendermode InteractiveServer

@using KringeShopWebClient.Auth
@using KringeShopWebClient.Model
@using Microsoft.AspNetCore.Components.Authorization
@using KringeShopWebClient.Services
@using KringeShopLib.Model
@using KringeShopWebClient.Extention

@inject IJSRuntime jsruntime;
@inject NavigationManager nav;
@inject AuthService authService;
@inject AuthenticationStateProvider authStateProvider;

<h3>Авторизация</h3>

<div>
    <div class="login-container">
        <h2>Вход в систему</h2>
        <p>Логин</p>
        <input type="text" class="input-field" @bind-value="username"/>

        <p>Пароль</p>
        <input type="password" class="input-field" @bind-value="pwd"/>

        <button @onclick="SignInMethod" class="btn">Войти</button>

        <p>Ещё нет аккаунта?</p>
        <button @onclick="SignUpMethod" class="btn">Зарегистрироваться</button>
    </div>

</div>


@code {
    private string pwd;
    private string username;

    // [CascadingParameter]
    // public HttpContext? httpContext { get; set; }

    private void SignUpMethod()
    {
        nav.NavigateTo("/SignUp");
    }

    private async Task SignInMethod()
    {
        ResponseTokenAndStuff response = await authService.SignIn(username, pwd);
        if (response is null)
        {
            await jsruntime.ToastrError("Что-то пошло не так");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            { 
                
                Username = response.Username,
                Role = response.Role
            });

        nav.NavigateTo("/");
    }
}
