@page "/Orders"
@rendermode InteractiveServer

@using KringeShopLib.Model
@using KringeShopWebClient.Services

@inject AdminService adminService;
@inject NavigationManager nav;

<AuthorizeView Roles="admin">
    <Authorized>
        <h3>Список заказов</h3>
        <div>

            <select @onchange="StatusChanged">
                @if (!(statuses is null) && statuses.Count != 0)
                {
                    foreach (var status in statuses)
                    {
                        <option value="@status.Id">@status.Title</option>
                    }
                }
            </select>

            <input type="number" @bind-value="searchedOrderId" placeholder="Поиск по номеру..." />
            <button @onclick="SearchOrder">
                <i class="bi bi-search"></i>
            </button>
            @if(searchedOrderId>0)
            {
                <button @onclick="ExitSearchOrder">
                    <i class="bi bi-x"></i>
                </button>
            }
        </div>
        @if (orders == null || orders.Count == 0)
        {
            <p>Нет доступных заказов.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Адрес</th>
                        <th>Полная стоимость</th>
                        <th>Дата получения</th>
                        <th>Статус</th>
                        <th>Дата создания</th>
                        <th>Самовывоз</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {

                        if (order != null)
                        {
                            <tr>
                                <td>@order.Id</td>
                                <td>@order.Adress</td>
                                <td>@order.FullCost</td>
                                <td>@order.RecieveDate?.ToString("g")</td>
                                <td>@order.Status</td>
                                <td>@order.CreateDate?.ToString("g")</td>
                                <td>@order.IsSelfPickUp</td>
                                <td><button @onclick="()=>GoToOrderDetails(order.Id)"><i>...</i></button></td>
                            </tr>
                        }

                    }
                </tbody>
            </table>
        }
     </Authorized>
     <NotAuthorized>
         <NotAuthorizedLayout/>
     </NotAuthorized>
</AuthorizeView>
 
@code {
    //private bool isEdit;
    private List<OrderDTO> orders;
    // private OrderDTO editOrder;
    private List<OrderStatusDTO> statuses;
    private int selectedStatusId;
    private int searchedOrderId;
    private bool search=false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    protected override Task OnInitializedAsync() => LoadData();

    private async Task LoadData()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if(user!=null)
        {
            orders = await adminService.GetOrdersList(user.FindFirst("Token")?.Value,selectedStatusId);
            statuses = await adminService.GetOrderStatuses(user.FindFirst("Token")?.Value);
            if(statuses!=null)
            {
                statuses.Insert(0, new OrderStatusDTO
                    {
                        Id = 0,
                        Title = "Все"
                    });
            }
        }

    }


    private void GoToOrderDetails(int order_id)
    {
        nav.NavigateTo($"OrderDetails/{order_id}");
    }

    // private void UpdateOrder(OrderDTO order)
    // {
    //     editOrder = order;
    //     StateHasChanged();

    // }

    // private async Task SaveOrder()
    // {
    //     var authState = await authenticationState;
    //     var user = authState.User;
    //     if(user!=null)
    //     {
    //         await adminService.UpdateOrder(user.FindFirst("Token")?.Value, editOrder);
    //         await LoadData();
    //     }

    //     editOrder = null;
    //     StateHasChanged();
    // }

    // private void CancelEdit()
    // {
    //     editOrder = null;
    //     StateHasChanged();
    // }

    private async void StatusChanged(ChangeEventArgs e)
    {
        selectedStatusId = Convert.ToInt32(e.Value);
        await LoadData();
        StateHasChanged();
    }

    private async void SearchOrder()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if(user!=null)
        {
            orders = new();
            OrderDTO searchedOder = await adminService.
            GetOrder(searchedOrderId,user.FindFirst("Token")?.Value);
            orders.Add(searchedOder);
            search = true;
            selectedStatusId = 0;
            StateHasChanged();
        }

    }

    private async void ExitSearchOrder()
    {
        searchedOrderId = 0;
        await LoadData();
        search = false;
        StateHasChanged();
    }
}
