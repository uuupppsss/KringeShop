@page "/Orders"
@rendermode InteractiveServer

@using KringeShopLib.Model
@using KringeShopWebClient.Services
@using Microsoft.AspNetCore.SignalR.Client
@using KringeShopWebClient.Extention

@inject AdminService adminService;
@inject NavigationManager nav;
@inject IJSRuntime js;


<AuthorizeView Roles="admin">
    <Authorized>
        <div class="page">
            <div class="sidebar">
                <NavMenu/>
            </div>
            <main class="main-content">
                <h3>Список заказов</h3>
                <div>

                    <select @onchange="StatusChanged">
                        @if (!(statuses is null) && statuses.Count != 0)
                        {
                            foreach (var status in statuses)
                            {
                                <option value="@status.Id">@status.Title</option>
                            }
                        }
                    </select>

                    <input type="number" @bind-value="searchedOrderId" placeholder="Поиск по номеру..." />
                    <button @onclick="SearchOrder">
                        <i class="bi bi-search"></i>
                    </button>
                    @if (searchedOrderId > 0)
                    {
                        <button @onclick="ExitSearchOrder">
                            <i class="bi bi-x"></i>
                        </button>
                    }
                </div>
                @if (orders == null || orders.Count == 0)
                {
                    <p>Нет доступных заказов.</p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Адрес</th>
                                <th>Полная стоимость</th>
                                <th>Дата получения</th>
                                <th>Статус</th>
                                <th>Дата создания</th>
                                <th>Самовывоз</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in orders)
                            {

                                if (order != null)
                                {
                                    <tr>
                                        <td style="color: @(order.Status == "принят" ? "red" : order.Status == "завершен" 
                                        || order.Status == "отменен" ? "gray" : 
                                        order.Status == "готов к получению" ? "green" : "black")">
                                            <strong>Заказ# @order.Id</strong>
                                        </td>
                                        <td>@order.Adress</td>
                                        <td>@order.FullCost</td>
                                        <td>@order.RecieveDate?.ToString("g")</td>
                                        <td>@order.Status</td>
                                        <td>@order.CreateDate?.ToString("g")</td>
                                        <td>@order.IsSelfPickUp</td>
                                        <td><button @onclick="()=>GoToOrderDetails(order.Id)"><i>...</i></button></td>
                                    </tr>
                                }

                            }
                        </tbody>
                    </table>
                }
            </main>
        </div>
     </Authorized>
     <NotAuthorized>
         <NotAuthorizedLayout/>
     </NotAuthorized>
</AuthorizeView>
 
@code {
    //private bool isEdit;
    private List<OrderDTO> orders;
    // private OrderDTO editOrder;
    private List<OrderStatusDTO> statuses;
    private int selectedStatusId;
    private int searchedOrderId;
    private bool search=false;
    private HubConnection _connection;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    protected override Task OnInitializedAsync() => LoadData();

    private async Task LoadData()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if(user!=null)
        {
            orders = await adminService.GetOrdersList(user.FindFirst("Token")?.Value,selectedStatusId);
            statuses = await adminService.GetOrderStatuses(user.FindFirst("Token")?.Value);
            if(statuses!=null)
            {
                statuses.Insert(0, new OrderStatusDTO
                    {
                        Id = 0,
                        Title = "Все"
                    });
            }
            //InitializeHubConnection();
        }

    }


    private void GoToOrderDetails(int order_id)
    {
        nav.NavigateTo($"OrderDetails/{order_id}");
    }

    private async void StatusChanged(ChangeEventArgs e)
    {
        selectedStatusId = Convert.ToInt32(e.Value);
        await LoadData();
        StateHasChanged();
    }

    private async void SearchOrder()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if(user!=null)
        {
            orders = new();
            OrderDTO searchedOder = await adminService.
            GetOrder(searchedOrderId,user.FindFirst("Token")?.Value);
            orders.Add(searchedOder);
            search = true;
            selectedStatusId = 0;
            StateHasChanged();
        }

    }

    private async void ExitSearchOrder()
    {
        searchedOrderId = 0;
        await LoadData();
        search = false;
        StateHasChanged();
    }

    private async void InitializeHubConnection()
    {
        _connection = new HubConnectionBuilder()
               .WithUrl("http://localhost:5216/clientshub")
               .Build();

        _connection.On<int>("OrderCreated", (order) =>
        {
            ShowOrderToast(order);
        });
        await _connection.StartAsync();
    }

    private async void ShowOrderToast(int order_id)
    {
        await js.ToastrSuccess($"Новый заказ #{order_id}");
        if(selectedStatusId==1&&searchedOrderId==0)
        {
            await LoadData();
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
        {
            InitializeHubConnection();
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}
