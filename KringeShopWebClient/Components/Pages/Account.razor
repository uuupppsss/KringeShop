@page "/Account"
@rendermode InteractiveServer

@using KringeShopWebClient.Services
@using KringeShopLib.Model
@using KringeShopWebClient.Components.Layout
@using KringeShopWebClient.Extention

@inject NavigationManager nav;
@inject UserService userSerice;
@inject IJSRuntime js;

<h3>Личный кабинет</h3>

    <AuthorizeView Roles="user,admin">
        <Authorized>
        <div class="center-container">
            <div class="auth-container">
                @if(CurrentUser!=null)
                {
                    if(!userDataChange)
                    {
                        <h5>Имя пользователя</h5>
                        <p>@CurrentUser.Username</p>
                        <h5>Электронная почта</h5>
                        <p>@CurrentUser.Email</p>
                        <h5>Контактный телефон</h5>
                        <p>@CurrentUser.ContactPhone</p>
                        <p></p>
                        <button style="margin-top:10px" @onclick="UpdateUser">Изменить данные</button>
                        <button style="margin-top:10px" @onclick="SignOut">Выйти из аккаунта</button>
                        <button style="margin-top:10px" @onclick="RemoveAccount">Удалить аккаунт</button>
                        <button style="margin-top:10px" @onclick="UpdatePassword">Изменить пароль</button>
                    }
                    else 
                    {

                            <h5>Имя пользователя</h5>
                            <input type="text" @bind-value="@CurrentUser.Username" />
                            <h5>Электронная почта</h5>
                            <input type="text" @bind-value="@CurrentUser.Email" />
                            <h5>Контактный телефон</h5>
                            <input type="text" @bind-value="@CurrentUser.ContactPhone" />
                            <button style="margin-top:10px" @onclick="SaveUserData">Сохранить</button>

                        
                    }
                    if (passwordChange)
                    {
                        <h5>Старый пароль</h5>
                        <input type="password" @bind-value="@oldPwd" />
                        <h5>Новый пароль</h5>
                        <input type="password" @bind-value="@newPwd" />
                        <h5>Повторите пароль</h5>
                        <input type="password" @bind-value="@repeatPwd" />
                        <button style="margin-top:10px" @onclick="SavePassword"> Сохранить</button>
                    }
                }

            </div>
        </div>
        </Authorized>
        <NotAuthorized>
            <div class="center-container">
                <div class="auth-container">
                    <button @onclick="SignIn">Войти</button>
                    <p>Ещё нет аккаунта?</p>
                    <button @onclick="SignUp">Зарегистрироваться</button>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
    

@code {
    private bool passwordChange=false;
    private bool userDataChange=false;

    private string oldPwd;
    private string newPwd;
    private string repeatPwd;

    private UserDTO CurrentUser;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override Task OnInitializedAsync() => LoadData();

    private async Task LoadData()
    {
        var authState = await authenticationState;
        if (!string.IsNullOrEmpty(authState.User.Identity.Name))
            CurrentUser = await userSerice.GetUserData(authState.User.Identity.Name);
    }

    private void SignIn()
    {
        nav.NavigateTo("SignIn");
    }

    private void SignUp()
    {
        nav.NavigateTo("SignUp");
    }

    private void SignOut()
    {

    }

    private void RemoveAccount()
    {

    }

    private void UpdateUser()
    {
        userDataChange = true;
        StateHasChanged();
    }
    private void UpdatePassword()
    {
        passwordChange=true;
        StateHasChanged();
    }


    private void SavePassword()
    {
        passwordChange = false;
        StateHasChanged();
    }
    private async void SaveUserData()
    {
        bool result = await userSerice.UpdateUser(CurrentUser);
        if (result)
        {
            await LoadData();
            userDataChange = false;
            StateHasChanged();
        }
        else await js.ToastrError("Ошибка сохранения данных");
    }
}
