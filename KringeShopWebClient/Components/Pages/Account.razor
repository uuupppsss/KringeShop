@page "/Account"
@rendermode InteractiveServer

@using KringeShopWebClient.Services
@using KringeShopLib.Model
@using KringeShopWebClient.Components.Layout
@using KringeShopWebClient.Extention
@using KringeShopWebClient.Auth
@using Microsoft.AspNetCore.Components.Server
@using KringeShopWebClient.Model

@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager nav;
@inject CustomerService customerSerice;
@inject IJSRuntime js;

<style>
    .account-container {
        display: flex; 
        justify-content: space-between; 
        padding: 20px; 
        background-color: #f8f0f2; 
        border-radius: 10px; 
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
    }

    .user-info {
        flex: 1; 
        margin-right: 20px; 
        display: flex;
        flex-direction: column; 
        text-align: left;
    }

    .button-group {
        display: flex;
        flex-direction: column; 
    }
    button{
        margin-top: 10px;
    }
</style>
@if(IsUser)
{
    @* <NavHomeLayout/> *@
    <h3>Личный кабинет</h3>

    <div class="account-container">
        @if (CurrentUser != null)
        {
            <div class="user-info">
                @if (!userDataChange)
                {
                    <h5>Имя пользователя</h5>
                    <p>@CurrentUser.Username</p>
                    <h5>Электронная почта</h5>
                    <p>@CurrentUser.Email</p>
                    <h5>Контактный телефон</h5>
                    <p>@CurrentUser.ContactPhone</p>
                }
                else
                {
                    
                }
            </div>
        }
        <div class="button-group">
            <button @onclick="UpdateUser" >Изменить данные</button>
            <button @onclick="SignOut">Выйти из аккаунта</button>
            <button @onclick="ViewOrders">Заказы</button>
        </div>
    </div>
}
else
{
    <NotAuthorizedLayout />
}


@code {
    private bool passwordChange=false;
    private bool userDataChange=false;

    private string oldPwd;
    private string newPwd;
    private string repeatPwd;

    private UserDTO CurrentUser;


    private bool IsUser;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override Task OnInitializedAsync() => LoadData();

    private async Task LoadData()
    {
        var authState = await authenticationState;
        if (!string.IsNullOrEmpty(authState.User.Identity.Name))
        {
            CurrentUser = await customerSerice.GetUserData(authState.User.FindFirst("Token")?.Value);

        }
        if (authState.User.IsInRole("user")) IsUser = true;
        else IsUser = false;

    }

    private void SignOut()
    {
        var customAuthStateProvider = authStateProvider as ServerAuthenticationStateProvider;
        customAuthStateProvider.SetAuthenticationState(Task.FromResult(new AuthenticationState(new System.Security.Claims.ClaimsPrincipal())));
        nav.NavigateTo("/", true);
    }

    private void ViewOrders()
    {
        nav.NavigateTo("/UserOrders");
    }

    private void UpdateUser()
    {
        nav.NavigateTo("/ChangeUserData");
    }
}
