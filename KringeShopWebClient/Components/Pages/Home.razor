@page "/"

@rendermode InteractiveServer

@using KringeShopWebClient.Services
@using KringeShopLib.Model
@using KringeShopWebClient.Extention

@inject IJSRuntime jsruntime;
@inject NavigationManager nav;
@inject UserService userservice;
@inject ConnectionService connectionService;
@* @inject NotifyService notifyService; *@

<PageTitle>Home</PageTitle>


<h3>Список товаров</h3>

<div>
    <div>
        @* <button @onclick="TestToast">Нажми</button> *@
        <input type="text" @bind="filter" placeholder="Фильтр по названию..." />

        <button @onclick="FilterProducts">
            <i class="bi bi-search"></i>
        </button>
    </div>
</div>

<div class="product-list">
    @if (products.Count == 0)
    {
        <h3>Ничего не нашлось</h3>
    }
    else
    {
        @foreach (var product in products)
        {
            <div class="product-item">
                <img />
                <h4>@product.Name</h4>
                <p>@product.Description</p>
                <p>Цена: @product.Price.ToString("C")</p>
                @if (userservice.CurrentUser != null)
                {
                    <div style="display:flex;">
                        @* <button style="margin:5px" @onclick="Minus">
                            -
                        </button>
                        <p>@count</p>
                        <button style="margin:5px" @onclick="()=>Plus(product.Count)">
                            +
                        </button> *@
                        <button @onclick="() => AddToBasket(product)">
                            <i class="bi bi-basket"></i>
                        </button>
                    </div>
                }
            </div>
        }
    }

</div>

@code {
    private string filter = string.Empty;
    private List<ProductDTO> products = new List<ProductDTO>();

    private async void ShowSuccessMessage(string message)
    {
        await jsruntime.ToastrSuccess(message);
    }

    private async void ShowErrorMessage(string message)
    {
        await jsruntime.ToastrError(message);
    }

    // private async void TestToast()
    // {
    //     await jsruntime.ToastrSuccess("Оао ммм)");
    // }

    protected override void OnInitialized()
    {

        GetProducts();

    }

    private async void AddToBasket(ProductDTO product)
    {
        BasketItemDTO basketItem= new BasketItemDTO()
        {
            UserId=userservice.CurrentUser.Id,
            ProductId=product.Id,
            Count=1,
            Cost=product.Price
        };

        await connectionService.AddProductToBasket(basketItem);
        StateHasChanged();

    }

    private async void GetProducts()
    {
        products = await connectionService.GetProductsList();
        StateHasChanged();

    }

    private async void FilterProducts()
    {
        if(!string.IsNullOrEmpty(filter))
        {
            products = await connectionService.GetFilteredProductsList(filter);
            StateHasChanged();
        }
    }

}
