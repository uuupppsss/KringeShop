@page "/"
@rendermode InteractiveServer

@using KringeShopWebClient.Components.Layout
@using KringeShopWebClient.Services
@using KringeShopLib.Model
@using KringeShopWebClient.Extention



@inject IJSRuntime jsruntime;
@inject NavigationManager nav;
@inject CustomerService customerService;
@inject AuthService authService;
@inject ConnectionService connectionService;


<style>
    .product-list {
        display: flex;
        flex-wrap: wrap;
    }

    
</style>
            <PageTitle>Home</PageTitle>

        
       <div class="page">
            <AuthorizeView Roles="admin">
                <Authorized>
            <div class="sidebar">
                <NavMenu />
            </div>
                </Authorized>
            </AuthorizeView>
        <main class="main-content">
        <div class=" button-container">
            <AuthorizeView Roles="admin">
                <NotAuthorized>
                    <button @onclick="GoToProfile" class="btn pink-btn">
                        <i class="bi bi-person"></i>
                    </button>
                    <button @onclick="GoToCart" class="btn pink-btn">
                        <i class="bi bi-basket"></i>
                    </button>
                </NotAuthorized>
            </AuthorizeView>
        </div>


        <div>
            <div>
                <input type="text" @bind-value="filter" placeholder="Поиск..." />
                <select @onchange="FilterTypeChanged">
                    @if (!(types is null) && types.Count != 0)
                    {
                        foreach (var type in types)
                        {
                            <option value="@type.Id">@type.Title</option>
                        }
                    }
                </select>
                <button @onclick="FilterProducts">
                    <i class="bi bi-search"></i>
                </button>
                @if (filter != null)
                {
                    <button @onclick="SkipFilter">
                        <i class="bi bi-x"></i>
                    </button>
                }
            </div>
        </div>

        <div class="product-list" @onwheel="OnScroll">
            @if (products is null)
            {
                <h3>Загрузка...</h3>
            }
            @if (products.Count == 0)
            {
                <h3>Ничего не нашлось</h3>
            }
            else
            {
                @foreach (var product in products)
                {
                    <div class="product-item">
                        @if (product.Images != null && product.Images.Count != 0)
                        {
                            <div class="image-carousel">
                                <button @onclick="() => PreviousImage(product)" class="image-btn">&#10094;</button>

                                <div class="carousel-images">
                                    @foreach (var image in product.Images)
                                    {
                                        <img src="@($"data:image/png;base64,{image}")" style="display: @(image == product.CurrentImage ? "block" : "none")" />
                                    }
                                </div>
                                <button @onclick="() => NextImage(product)" class="image-btn">&#10095;</button>
                            </div>
                        }
                        else
                        {
                            <img title="картинок пока нет" />
                        }
                        <h4>@product.Name</h4>
                        <p>@product.Description</p>
                        <p>Цена: @product.Price.ToString("C") </p>
                        <button @onclick="()=>GoToDetails(product.Id)">...</button>
                        @if (product.Count > 0)
                        {
                            <AuthorizeView Roles="user">
                                <Authorized>
                                    <div style="display:flex;">
                                        <button @onclick="() => BasketButtonClick(product)" class="@GetButtonClass(product)">
                                            <i class="bi bi-basket"></i>
                                        </button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        }
                        else
                        {
                            <i>Нет в наличии</i>
                        }



                    </div>
                }
            }

        </div>
        </main>
       </div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private List<ProductDTO> products;

    private string filter;

    private List<ProductTypeDTO> types;
    private int selectedFilterTypeId;

    private HashSet<int> basketProducts = new HashSet<int>();
    private bool isLoading;
    private int loadedItemsCount = 0;
    private int productsCount = 0;

    protected override Task OnInitializedAsync() => LoadData();
    private async Task LoadData()
    {
        if (products is null) products = new();
        loadedItemsCount = 0;
        types = await connectionService.GetTypesList();
        types.Insert(0, new ProductTypeDTO {Id=0,Title="Все" });
        await LoadMoreProducts();
        productsCount = await connectionService.GetProductsCount();
        var authState = await authenticationState;
        if (!string.IsNullOrEmpty(authState.User.Identity.Name))
            basketProducts = await customerService.GetProductsInBasket(authState.User.FindFirst("Token")?.Value);

    }

    private void PreviousImage(ProductDTO product)
    {
        if (product.Images != null && product.Images.Count > 0)
        {
            var currentIndex = product.Images.IndexOf(product.CurrentImage);
            if (currentIndex > 0)
            {
                product.CurrentImage = product.Images[currentIndex - 1];
            }
            //else product.CurrentImage = product.Images[currentIndex + 1];
        }
    }

    private void NextImage(ProductDTO product)
    {
        if (product.Images != null && product.Images.Count > 0)
        {
            var currentIndex = product.Images.IndexOf(product.CurrentImage);
            if (currentIndex < product.Images.Count - 1)
            {
                product.CurrentImage = product.Images[currentIndex + 1];
            }
            //else product.CurrentImage = product.Images[currentIndex - 1];
        }
    }

    private string GetButtonClass(ProductDTO product)
    {
        return basketProducts.Contains(product.Id) ? "btn btn-success" : "btn btn-outline-primary";
    }

    private async void BasketButtonClick(ProductDTO product)
    {
        if (!basketProducts.Contains(product.Id))
        {
            AddProductToBasket(product);
        }
        else await jsruntime.ToastrError("Товар уже в корзине");

    }

    private async void AddProductToBasket(ProductDTO product)
    {
        var authState = await authenticationState;
        int count = 1;
        BasketItemDTO basketitem = new BasketItemDTO()
            {
                ProductId = product.Id,
                Count = count,
                Cost = product.Price * count,
            };

        if (!string.IsNullOrEmpty(authState.User.FindFirst("Token")?.Value))
        {
            await customerService.AddProductToBasket(authState.User.FindFirst("Token")?.Value, basketitem);
            basketProducts = await customerService.GetProductsInBasket(authState.User.FindFirst("Token")?.Value);
            StateHasChanged();
        }
    }

    private async void FilterProducts()
    {
        if (isLoading) return;
        isLoading = true;

        productsCount = await connectionService.GetProductsCount(filter,selectedFilterTypeId);
        products = new();

        loadedItemsCount = 0;
        var newProducts = await connectionService.
        GetProductsList(loadedItemsCount, filter, selectedFilterTypeId);

        products.AddRange(newProducts);
        loadedItemsCount += newProducts.Count;
        isLoading = false;
        StateHasChanged();
    }

    private void GoToDetails(int product_id)
    {
        bool isInBasket = basketProducts.Contains(product_id);
        nav.NavigateTo($"product/{product_id}/{isInBasket}");
    }

    //***
    private async Task LoadMoreProducts()
    {
        if (isLoading) return;

        isLoading = true;
        var newProducts = await connectionService.GetProductsList(loadedItemsCount,filter,selectedFilterTypeId);
        products.AddRange(newProducts);
        loadedItemsCount += newProducts.Count;
        isLoading = false;
        StateHasChanged(); 
    }

    private async void OnScroll()
    {
        await LoadMoreProducts();

    }

    private void FilterTypeChanged(ChangeEventArgs e)
    {
        selectedFilterTypeId = Convert.ToInt32(e.Value);
        FilterProducts();

    }

    private async void SkipFilter()
    {
        filter = null;
        selectedFilterTypeId = 0;
        await LoadData();
        StateHasChanged();
    }

    private void GoToCart()
    {
        nav.NavigateTo("/Basket");
    }

    private void GoToProfile()
    {
        nav.NavigateTo("/Account");
    }
}
