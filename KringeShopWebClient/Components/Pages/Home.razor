@page "/"

@rendermode InteractiveServer

@using KringeShopWebClient.Services
@using KringeShopLib.Model
@using KringeShopWebClient.Extention


@inject IJSRuntime jsruntime;
@inject NavigationManager nav;
@inject CustomerService customerService;
@inject AuthService authService;
@inject ConnectionService connectionService;

<PageTitle>Home</PageTitle>

<AuthorizeView Roles="user,admin">
    <Authorized>
        <h3>Hello @context.User.Identity.Name</h3>
    </Authorized>

    <NotAuthorized>
        <h3>Hello guest</h3>
    </NotAuthorized>
</AuthorizeView>

<h3>Список товаров</h3>

<div>
    <div>
         <button @onclick="TestToast">Нажми</button> 
        <input type="text" @bind="filter" placeholder="Фильтр по названию..." />

        <button @onclick="FilterProducts">
            <i class="bi bi-search"></i>
        </button>
    </div>
</div>

<div class="product-list">
    @if (products is null||products.Count==0)
    {
        <h3>Ничего не нашлось</h3>
    }
    else
    {
        @foreach (var product in products)
        {
            <div class="product-item">
                <img />
                <h4>@product.Name</h4>
                <p>@product.Description</p>
                <p>Цена: @product.Price.ToString("C")</p>
                <AuthorizeView Roles="user">
                    <Authorized>
                        <div style="display:flex;">

                            <button @onclick="() => AddToBasket(product)">
                                <i class="bi bi-basket"></i>
                            </button>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        }
    }

</div>

@code {
    private string filter = string.Empty;
    private List<ProductDTO> products = new List<ProductDTO>();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    private async void TestToast()
    {
        var authState=await authenticationState; 
        await jsruntime.InvokeVoidAsync("alert", $"Hello, {authState.User.Identity.Name}");
    }

    private async void ShowSuccessMessage(string message)
    {
        await jsruntime.ToastrSuccess(message);
    }

    private async void ShowErrorMessage(string message)
    {
        await jsruntime.ToastrError(message);
    }

    // private async void TestToast()
    // {
    //     await jsruntime.ToastrSuccess("Оао ммм)");
    // }

    protected override void OnInitialized()
    {

        GetProducts();

    }

    private async void AddToBasket(ProductDTO product)
    {
        var authState = await authenticationState;
        int count = 1;
        BasketItemDTO basketitem = new BasketItemDTO()
        {
            ProductId=product.Id,
            Count=count,
            Cost=product.Price*count
        };

        await customerService.AddProductToBasket(authState.User.Identity.Name, basketitem);
    }

    private async void GetProducts()
    {
        products = await connectionService.GetProductsList();
        StateHasChanged();

    }

    private async void FilterProducts()
    {
        if(!string.IsNullOrEmpty(filter))
        {
            products = await connectionService.GetFilteredProductsList(filter);
            StateHasChanged();
        }
    }

}
