@page "/OrderDetails/{OrderId:int}"
@rendermode InteractiveServer

@using KringeShopLib.Model;
@using KringeShopWebClient.Services;

@inject AdminService adminService;
@inject NavigationManager nav;

<AuthorizeView Roles="admin"> 
    <Authorized>
        @if (order != null)
        {
            <div>
                <h5>Заказ #@order.Id</h5>
                <p><strong>Адрес:</strong> @order.Adress</p>
                <p><strong>Полная стоимость:</strong> @order.FullCost.ToString("C")</p>
                @if(isEditing)
                {
                    <p><strong>Дата получения:</strong>
                        <input type="date" @bind-value="updatedRecieveDate" />
                    </p>

                    <p>
                        <strong>Статус:</strong>
                        <select @bind="updatedStatusId">
                            @if (!(statuses is null) && statuses.Count != 0)
                            {
                                foreach (var status in statuses)
                                {
                                    <option value="@status.Id">@status.Title</option>
                                }
                            }
                        </select>
                    </p>
                }
                else
                {
                    <p><strong>Дата получения:</strong> @order.RecieveDate?.ToString("d")</p>
                    <p><strong>Статус:</strong> @order.Status</p>
                }
                <p><strong>Дата создания:</strong> @order.CreateDate?.ToString("d")</p>
                <p><strong>Самовывоз:</strong> @(order.IsSelfPickUp ? "Да" : "Нет")</p>

                <h5>Товары в заказе:</h5>
                <ul>
                    @if (orderItems != null)
                    {
                        foreach (var item in orderItems)
                        {
                            <li>
                                <div>
                                    <label>Товар#@item.ProductId @item.ProductName - @item.Count шт. - @item.Cost.ToString("C")</label>
                                    <button @onclick="()=>GoToProductDetails(item.ProductId)"><i>...</i></button>
                                </div>
                            </li>
                        }
                    }
                </ul>

                <h5>Контактные данные:</h5>
                @if (user != null)
                {
                    <label><strong>Имя пользователя</strong></label>
                    <p>@user.Username</p>

                    <label><strong>Почта</strong></label>
                    <p>@user.Email</p>

                    <label><strong>Телефон</strong></label>
                    <p>@user.ContactPhone</p>
                }

                @if(order.StatusId!=4&&order.StatusId!=5)
                {
                    @if(isEditing)
                    {
                        <button @onclick="SaveChanges">
                            <i class="bi bi-check"></i>
                        </button>
                        <button @onclick="ExitEditing">
                            <i class="bi bi-x"></i>
                        </button>
                    }
                    else
                    {
                        <button @onclick="UpdateOrder">
                            <i class="bi bi-pencil"></i>
                        </button>
                    }

            }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedLayout/>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int OrderId{ get; set; }
    private OrderDTO order;
    private UserDTO user;
    private List<OrderItemDTO> orderItems;
    private bool isEditing = false;
    private List<OrderStatusDTO> statuses;

    private int updatedStatusId;
    private DateTime? updatedRecieveDate;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override Task OnInitializedAsync() => LoadData();

    private async Task LoadData()
    {
        var auth = await authenticationState;
        statuses = await adminService.GetOrderStatuses(auth.User.FindFirst("Token")?.Value);
        order = await adminService.GetOrder(OrderId, auth.User.FindFirst("Token")?.Value);
        if(order!=null)
        {
            orderItems = await adminService.GetOrderItems(auth.User.FindFirst("Token")?.Value,OrderId);
            user = await adminService.GetUserData(auth.User.FindFirst("Token")?.Value,order.UserId);
            updatedStatusId = order.StatusId;
            updatedRecieveDate = order.RecieveDate;
        }
    }

    private void GoToProductDetails(int product_id)
    {
        nav.NavigateTo($"/Product/{product_id}");
    }

    private void UpdateOrder()
    {
        isEditing = true;
        StateHasChanged();
    }

    private async void SaveChanges()
    {
        var auth = await authenticationState;
        order.RecieveDate = updatedRecieveDate;
        order.StatusId = updatedStatusId;
        await adminService.UpdateOrder(auth.User.FindFirst("Token")?.Value,order);
        order = await adminService.GetOrder(OrderId, auth.User.FindFirst("Token")?.Value);
        isEditing = false;
        StateHasChanged();
    }

    private void ExitEditing()
    {
        isEditing = false;
        StateHasChanged();
    }
}
