@page "/Product/{ProductId:int}/{IsInBasket:bool}"
@rendermode InteractiveServer

@using KringeShopLib.Model
@using KringeShopWebClient.Services

@inject ConnectionService connectionService;
@inject CustomerService customerService;

@if(Product!=null)
{
    <div class="center-container">
        <div class="product-card">
            @if(Product.Images!=null&&Product.Images.Count!=0)
            {
                <div class="image-carousel">
                    <button @onclick="() => PreviousImage(Product)" class="image-btn">&#10094;</button>

                    <div class="carousel-images">
                        @foreach (var image in Product.Images)
                        {
                            <img src="@($"data:image/png;base64,{image}")" style="display: @(image == Product.CurrentImage ? "block" : "none")" />
                        }
                    </div>
                    <button @onclick="() => NextImage(Product)" class="image-btn">&#10095;</button>
                </div>
            }
            else
            {
                <img title="картинок пока нет" />
            }
            
            
            <h2 class="product-title">@Product.Name</h2>
            <p class="product-description">@Product.Description</p>
            <p class="product-description">@Product.Type</p>
            <span class="product-price">@Product.Price ₽</span>
            <p>Осталось @Product.Count шт.</p>

           
                    @if(Product.Count>0)
                    {
                    <AuthorizeView Roles="user">
                        <Authorized>
                            <div>
                            <button @onclick="AddProductToBasket" disabled="@IsInBasket" class="buy-button">
                                <i class="bi bi-basket"></i>
                            </button>
                            @if(IsInBasket)
                            {
                                <i>Товар в корзине</i>
                            }
                                                    </div>
                        </Authorized>
                    </AuthorizeView>
                    }
                    else
                    {
                        <i>Нет в наличии</i>
                    }
               
            <AuthorizeView Roles="admin">
                <Authorized>
                    <div style="display:flex;">

                        <button>
                            <i class="bi bi-pencil"></i>
                        </button>

                        <button>
                            <i class="bi bi-trash"></i>
                        </button>

                    </div>
                </Authorized>

            </AuthorizeView>
        </div>
        
    </div>
}
else
{
    <p>Что то пошло не так :( Продукт: @ProductId</p>
}
@code {
    [Parameter]
    public int ProductId { get; set; }
    [Parameter]
    public bool IsInBasket { get; set; }

    private ProductDTO Product;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override Task OnInitializedAsync() => LoadData();

    private async Task LoadData()
    {
        Product = await connectionService.GetProductDetails(ProductId);
    }

    private void PreviousImage(ProductDTO product)
    {
        if (product.Images != null && product.Images.Count > 0)
        {
            var currentIndex = product.Images.IndexOf(product.CurrentImage);
            if (currentIndex > 0)
            {
                product.CurrentImage = product.Images[currentIndex - 1];
            }
            //else product.CurrentImage = product.Images[currentIndex + 1];
        }
    }

    private void NextImage(ProductDTO product)
    {
        if (product.Images != null && product.Images.Count > 0)
        {
            var currentIndex = product.Images.IndexOf(product.CurrentImage);
            if (currentIndex < product.Images.Count - 1)
            {
                product.CurrentImage = product.Images[currentIndex + 1];
            }
            //else product.CurrentImage = product.Images[currentIndex - 1];
        }
    }

    private async void AddProductToBasket()
    {
        var authState = await authenticationState;
        BasketItemDTO basketitem = new BasketItemDTO()
            {
                ProductId = ProductId,
                Count = 1,
                Cost = Product.Price
            };

        if (!string.IsNullOrEmpty(authState.User.FindFirst("Token")?.Value))
        {
            await customerService.AddProductToBasket(authState.User.FindFirst("Token")?.Value, basketitem);

            StateHasChanged();
        }

        IsInBasket = true;
        StateHasChanged();
    }
}
