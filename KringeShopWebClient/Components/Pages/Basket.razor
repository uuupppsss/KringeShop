@page "/Basket"
@rendermode InteractiveServer

@using KringeShopWebClient.Services;

@inject NavigationManager nav;
@inject CustomerService customerService;

@using KringeShopLib.Model

<h3>Корзина товаров</h3>
<AuthorizeView Roles="user">
    <Authorized>
        @if(basketItems!=null)
        {
            if(basketItems.Count!=null)
            {
                    <div>
                    @foreach (var basketItem in basketItems)
                    {
                        <div style="display:flex; margin:5px">
                            <p>@basketItem.ProductName</p>
                            <button @onclick="()=>IncrementItemCount(basketItem)">+</button>
                            <p>@basketItem.Count</p>
                            <button @onclick="()=>DecrementItemCount(basketItem)"> -</button>
                            <p>@basketItem.Cost</p>
                            <p>рублей</p>
                            <button>Удалить</button>
                        </div>
                    }
                    <button>Оформить заказ</button>
                    </div>
            }
            else
            {
                <p>Корзина пуста</p>
            }
        }
    </Authorized>

    <NotAuthorized>
        <div class="center-container">
            <div class="auth-container">
                <p>Для перехода в корзину товаров необходимо войти в учётную запись</p>
                <button @onclick="SignIn">Войти</button>
                <p>Ещё нет аккаунта?</p>
                <button @onclick="SignUp">Зарегистрироваться</button>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code
{
    private List<BasketItemDTO> basketItems;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override Task OnInitializedAsync() => LoadData();

    private async Task LoadData()
    {
        var authState = await authenticationState;
        if (!string.IsNullOrEmpty(authState.User.Identity.Name))
            basketItems=await customerService.GetUserBasket(authState.User.Identity.Name);
    }

    private void SignUp()
    {
        nav.NavigateTo("/SignUp");
    }

    private void SignIn()
    {
        nav.NavigateTo("/SignIn");
    }

    private async void IncrementItemCount(BasketItemDTO basketItem)
    {
        int maxCount = await customerService.GetBasketItemMaxCount(basketItem.Id);
        if(basketItem.Count<maxCount)
        {
            decimal price = basketItem.Cost / basketItem.Count;
            basketItem.Count++;
            basketItem.Cost = price * basketItem.Count;
            await customerService.UpdateBasketItem(basketItem);
        }

    }

    private async void DeleteBasketItem()
    {
        
    }

    private async void DecrementItemCount(BasketItemDTO basketItem)
    {
        if(basketItem.Count>1)
        {
            decimal price = basketItem.Cost / basketItem.Count;
            basketItem.Count--;
            basketItem.Cost = price * basketItem.Count;
            await customerService.UpdateBasketItem(basketItem);
            StateHasChanged();
        }
    }
}