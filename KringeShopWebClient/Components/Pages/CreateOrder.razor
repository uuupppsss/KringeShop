@page "/CreateOrder"
@rendermode InteractiveServer

@using KringeShopLib.Model
@using KringeShopWebClient.Services
@using Microsoft.AspNetCore.SignalR.Client

@inject CustomerService customerService;

@if(IsUser)
{
    @* <NavHomeLayout/> *@
    <EditForm Model="@order" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="address">Адрес</label>
            <InputText id="address" class="form-control" @bind-Value="order.Adress" />
            <ValidationMessage For="@(() => order.Adress)" />
        </div>

        <div class="form-group">
            <label for="isSelfPickUp">Самовывоз</label>
            <InputCheckbox id="isSelfPickUp" @bind-Value="order.IsSelfPickUp" />
        </div>

        <button type="submit" class="btn btn-primary">Создать заказ</button>
    </EditForm>
}
else
{
    <NotAuthorizedLayout/>
}

@code {
    private OrderDTO order;
    protected override void OnInitialized()
    {
        order = new OrderDTO();
        base.OnInitialized();
    }

    private bool IsUser;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private HubConnection _connection;

    protected override async Task OnInitializedAsync()
    {
        var auth = await authenticationState;

        IsUser = auth.User.Identity.IsAuthenticated 
        && auth.User.IsInRole("user");
        InitializeHubConnection();
    }

    private async Task HandleValidSubmit()
    {
        order.CreateDate = DateTime.Now;

        //debug
        order.RecieveDate = DateTime.MinValue;
        order.FullCost = 1;
        order.StatusId = 1;
        order.IsCmpleted = false;
        //debug

        var authState = await authenticationState;
        if (!string.IsNullOrEmpty(authState.User.Identity.Name))
            await customerService.CreateOrder(authState.User.FindFirst("Token")?.Value, order);

        await _connection.InvokeAsync("OrderCreated",666);
    }

    private async void InitializeHubConnection()
    {
        _connection = new HubConnectionBuilder()
               .WithUrl("http://localhost:5216/clientshub")
               .Build();
        await _connection.StartAsync();
    }
}
