@page "/AddProduct"
@* @attribute [Authorize (Roles ="admin")] *@
@rendermode InteractiveServer
@using KringeShopWebClient.Model
@using KringeShopLib.Model
@using System.Net.Http.Headers
@using KringeShopWebClient.Services
@using KringeShopWebClient.Extention

@inject AdminService adminService
@inject IJSRuntime js
@* <AuthorizeView Roles="admin">
    <Authorized> *@
@if(isAdmin)
{
    <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Название:</label>
            <InputText @bind-Value="product.Name" />
        </div>
        <div>
            <label>Описание:</label>
            <InputTextArea @bind-Value="product.Description" />
        </div>
        <div>
            <label>Цена:</label>
            <InputNumber @bind-Value="product.Price" />
        </div>
        <div>
            <label>Количество:</label>
            <InputNumber @bind-Value="product.Count" />
        </div>
        <div>
            <label>Изображения: (выберите до 5 картинок)</label>
            <InputFile OnChange="HandleFileSelected" multiple accept=".jpg, .jpeg, .png" />

        </div>
        <div>
            <label>Категория:</label>
            <select @bind="selectedTypeId">
                @if (!(types is null) && types.Count != 0)
                {
                    foreach (var type in types)
                    {
                        <option value="@type.Id">@type.Title</option>
                    }
                }
            </select>
        </div>

        <button type="submit">Сохранить</button>
    </EditForm>
}
@*  </Authorized>
</AuthorizeView> *@
      
<style>
    .scaled-image {
        transform: scale(0.2); 
        transform-origin: top left; 
    }
</style>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private ProductDTO product=new ProductDTO();
    private List<byte[]> productPhotos;
    private int selectedTypeId;
    private List<ProductTypeDTO> types;

    private bool isAdmin;

    protected override async Task OnInitializedAsync() => LoadData();

    private async Task HandleValidSubmit()
    {
        
        product.TypeId = selectedTypeId;
        await adminService.AddProduct(product, productPhotos);
    }

    private async Task LoadData()
    {
        types = await adminService.GetTypesList();
        var auth = await authenticationState;
        var user = auth.User;
        isAdmin = user.Identity.IsAuthenticated && user.IsInRole("admin");
        StateHasChanged();
    }

    private async void HandleFileSelected(InputFileChangeEventArgs e)
    {
        productPhotos = new();
        var files = e.GetMultipleFiles(5); // Получаем 5 картинок
        if (files != null && files.Count > 0)
        {
            foreach (var file in files)
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5 МБ
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                productPhotos.Add(memoryStream.ToArray());
            }
        }
    }
}


